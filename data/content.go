// Code generated by github.com/go-enry/go-enry/v2/internal/code-generator DO NOT EDIT.
// Extracted from github/linguist commit: cdf42b16b136fc7f0a491d36c415f34fcfb9368a

package data

import (
	"github.com/go-enry/go-enry/v2/data/rule"
	"github.com/go-enry/go-enry/v2/regex"
)

var ContentHeuristics = map[string]*Heuristics{
	".1": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".1in": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".1m": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".1x": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".2": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".3": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".3in": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".3m": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".3p": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".3pm": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".3qt": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".3x": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".4": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".5": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".6": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".7": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".8": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".9": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.(?:[A-Za-z]{2}(?:\s|$)|\\")`),
		),
	},
	".al": &Heuristics{
		rule.And(
			rule.MatchingLanguages("AL"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`\b(?i:(CODEUNIT|PAGE|PAGEEXTENSION|PAGECUSTOMIZATION|DOTNET|ENUM|ENUMEXTENSION|VALUE|QUERY|REPORT|TABLE|TABLEEXTENSION|XMLPORT|PROFILE|CONTROLADDIN))\b`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Perl"),
		),
	},
	".as": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("ActionScript"),
			regex.MustCompileRuby(`^\s*(?:package(?:\s+[\w.]+)?\s+(?:{|$)|import\s+[\w.*]+\s*;|(?=.*?(?:intrinsic|extends))(intrinsic\s+)?class\s+[\w<>.]+(?:\s+extends\s+[\w<>.]+)?|(?:(?:public|protected|private|static)\s+)*(?:(?:var|const|local)\s+\w+\s*:\s*[\w<>.]+(?:\s*=.*)?\s*;|function\s+\w+\s*\((?:\s*\w+\s*:\s*[\w<>.]+\s*(,\s*\w+\s*:\s*[\w<>.]+\s*)*)?\)))`),
		),
	},
	".asc": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Public Key"),
			regex.MustCompileRuby(`^(----[- ]BEGIN|ssh-(rsa|dss)) `),
		),
		rule.Or(
			rule.MatchingLanguages("AsciiDoc"),
			regex.MustCompileRuby(`^[=-]+(\s|\n)|{{[A-Za-z]`),
		),
		rule.Or(
			rule.MatchingLanguages("AGS Script"),
			regex.MustCompileRuby(`^(\/\/.+|((import|export)\s+)?(function|int|float|char)\s+((room|repeatedly|on|game)_)?([A-Za-z]+[A-Za-z_0-9]+)\s*[;\(])`),
		),
	},
	".asm": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Motorola 68K Assembly"),
			regex.MustCompileRuby(`(?im)\bmoveq(?:\.l)?\s+#(?:\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\s*d[0-7]\b|(?im)^\s*move(?:\.[bwl])?\s+(?:sr|usp),\s*[^\s]+|(?im)^\s*move\.[bwl]\s+.*\b[ad]\d|(?im)^\s*movem\.[bwl]\b|(?im)^\s*move[mp](?:\.[wl])?\b|(?im)^\s*btst\b|(?im)^\s*dbra\b`),
		),
	},
	".asy": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("LTspice Symbol"),
			regex.MustCompileRuby(`^SymbolType[ \t]`),
		),
		rule.Always(
			rule.MatchingLanguages("Asymptote"),
		),
	},
	".bas": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("FreeBasic"),
			regex.MustCompileRuby(`^[ \t]*#(?:define|endif|endmacro|ifn?def|if|include|lang|macro)\s`),
		),
		rule.Or(
			rule.MatchingLanguages("BASIC"),
			regex.MustCompileRuby(`^\s*\d+`),
		),
	},
	".bb": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("BlitzBasic"),
			regex.MustCompileRuby(`(<^\s*; |End Function)`),
		),
		rule.Or(
			rule.MatchingLanguages("BitBake"),
			regex.MustCompileRuby(`^\s*(# |include|require)\b`),
		),
	},
	".bi": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("FreeBasic"),
			regex.MustCompileRuby(`^[ \t]*#(?:define|endif|endmacro|ifn?def|if|include|lang|macro)\s`),
		),
	},
	".builds": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("XML"),
			regex.MustCompileRuby(`^(\s*)(?i:<Project|<Import|<Property|<?xml|xmlns)`),
		),
	},
	".ch": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("xBase"),
			regex.MustCompileRuby(`^\s*#\s*(?i:if|ifdef|ifndef|define|command|xcommand|translate|xtranslate|include|pragma|undef)\b`),
		),
	},
	".cl": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Common Lisp"),
			regex.MustCompileRuby(`^\s*\((?i:defun|in-package|defpackage) `),
		),
		rule.Or(
			rule.MatchingLanguages("Cool"),
			regex.MustCompileRuby(`^class`),
		),
		rule.Or(
			rule.MatchingLanguages("OpenCL"),
			regex.MustCompileRuby(`\/\* |\/\/ |^\}`),
		),
	},
	".cls": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("TeX"),
			regex.MustCompileRuby(`^\s*\\(?:NeedsTeXFormat|ProvidesClass){`),
		),
		rule.Or(
			rule.MatchingLanguages("ObjectScript"),
			regex.MustCompileRuby(`^Class\s`),
		),
	},
	".cmp": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Gerber Image"),
			regex.MustCompileRuby(`^[DGMT][0-9]{2}\*\r?\n`),
		),
	},
	".cs": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Smalltalk"),
			regex.MustCompileRuby(`![\w\s]+methodsFor: `),
		),
		rule.Or(
			rule.MatchingLanguages("C#"),
			regex.MustCompileRuby(`^(\s*namespace\s*[\w\.]+\s*{|\s*\/\/)`),
		),
	},
	".csl": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("XML"),
			regex.MustCompileRuby(`(?i:^\s*(\<\?xml|xmlns))`),
		),
		rule.Or(
			rule.MatchingLanguages("Kusto"),
			regex.MustCompileRuby(`(^\|\s*(where|extend|project|limit|summarize))|(^\.\w+)`),
		),
	},
	".d": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("D"),
			regex.MustCompileRuby(`^module\s+[\w.]*\s*;|import\s+[\w\s,.:]*;|\w+\s+\w+\s*\(.*\)(?:\(.*\))?\s*{[^}]*}|unittest\s*(?:\(.*\))?\s*{[^}]*}`),
		),
		rule.Or(
			rule.MatchingLanguages("DTrace"),
			regex.MustCompileRuby(`^(\w+:\w*:\w*:\w*|BEGIN|END|provider\s+|(tick|profile)-\w+\s+{[^}]*}|#pragma\s+D\s+(option|attributes|depends_on)\s|#pragma\s+ident\s)`),
		),
		rule.Or(
			rule.MatchingLanguages("Makefile"),
			regex.MustCompileRuby(`([\/\\].*:\s+.*\s\\$|: \\$|^[ %]:|^[\w\s\/\\.]+\w+\.\w+\s*:\s+[\w\s\/\\.]+\w+\.\w+)`),
		),
	},
	".dsp": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Microsoft Developer Studio Project"),
			regex.MustCompileRuby(`# Microsoft Developer Studio Generated Build File`),
		),
		rule.Or(
			rule.MatchingLanguages("Faust"),
			regex.MustCompileRuby(`\bprocess\s*[(=]|\b(library|import)\s*\(\s*"|\bdeclare\s+(name|version|author|copyright|license)\s+"`),
		),
	},
	".ecl": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("ECLiPSe"),
			regex.MustCompileRuby(`^[^#]+:-`),
		),
		rule.Or(
			rule.MatchingLanguages("ECL"),
			regex.MustCompileRuby(`:=`),
		),
	},
	".es": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Erlang"),
			regex.MustCompileRuby(`^\s*(?:%%|main\s*\(.*?\)\s*->)`),
		),
		rule.Or(
			rule.MatchingLanguages("JavaScript"),
			regex.MustCompileRuby(`(?m:\/\/|("|')use strict\1|export\s+default\s|\/\*.*?\*\/)`),
		),
	},
	".f": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Forth"),
			regex.MustCompileRuby(`^: `),
		),
		rule.Or(
			rule.MatchingLanguages("Filebench WML"),
			regex.MustCompileRuby(`flowop`),
		),
		rule.Or(
			rule.MatchingLanguages("Fortran"),
			regex.MustCompileRuby(`^(?i:[c*][^abd-z]|      (subroutine|program|end|data)\s|\s*!)`),
		),
	},
	".for": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Forth"),
			regex.MustCompileRuby(`^: `),
		),
		rule.Or(
			rule.MatchingLanguages("Fortran"),
			regex.MustCompileRuby(`^(?i:[c*][^abd-z]|      (subroutine|program|end|data)\s|\s*!)`),
		),
	},
	".fr": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Forth"),
			regex.MustCompileRuby(`^(: |also |new-device|previous )`),
		),
		rule.Or(
			rule.MatchingLanguages("Frege"),
			regex.MustCompileRuby(`^\s*(import|module|package|data|type) `),
		),
		rule.Always(
			rule.MatchingLanguages("Text"),
		),
	},
	".fs": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Forth"),
			regex.MustCompileRuby(`^(: |new-device)`),
		),
		rule.Or(
			rule.MatchingLanguages("F#"),
			regex.MustCompileRuby(`^\s*(#light|import|let|module|namespace|open|type)`),
		),
		rule.Or(
			rule.MatchingLanguages("GLSL"),
			regex.MustCompileRuby(`^\s*(#version|precision|uniform|varying|vec[234])`),
		),
		rule.Or(
			rule.MatchingLanguages("Filterscript"),
			regex.MustCompileRuby(`#include|#pragma\s+(rs|version)|__attribute__`),
		),
	},
	".ftl": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("FreeMarker"),
			regex.MustCompileRuby(`^(?:<|[a-zA-Z-][a-zA-Z0-9_-]+[ \t]+\w)|\${\w+[^\n]*?}|^[ \t]*(?:<#--.*?-->|<#([a-z]+)(?=\s|>)[^>]*>.*?</#\1>|\[#--.*?--\]|\[#([a-z]+)(?=\s|\])[^\]]*\].*?\[#\2\])`),
		),
		rule.Or(
			rule.MatchingLanguages("Fluent"),
			regex.MustCompileRuby(`^-?[a-zA-Z][a-zA-Z0-9_-]* *=|\{\$-?[a-zA-Z][-\w]*(?:\.[a-zA-Z][-\w]*)?\}`),
		),
	},
	".gd": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("GAP"),
			regex.MustCompileRuby(`\s*(Declare|BindGlobal|KeyDependentOperation)`),
		),
		rule.Or(
			rule.MatchingLanguages("GDScript"),
			regex.MustCompileRuby(`\s*(extends|var|const|enum|func|class|signal|tool|yield|assert|onready)`),
		),
	},
	".gml": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("XML"),
			regex.MustCompileRuby(`(?i:^\s*(\<\?xml|xmlns))`),
		),
		rule.Or(
			rule.MatchingLanguages("Graph Modeling Language"),
			regex.MustCompileRuby(`(?i:^\s*(graph|node)\s+\[$)`),
		),
		rule.Or(
			rule.MatchingLanguages("Gerber Image"),
			regex.MustCompileRuby(`^[DGMT][0-9]{2}\*$`),
		),
		rule.Always(
			rule.MatchingLanguages("Game Maker Language"),
		),
	},
	".gs": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("GLSL"),
			regex.MustCompileRuby(`^#version\s+[0-9]+\b`),
		),
		rule.Or(
			rule.MatchingLanguages("Gosu"),
			regex.MustCompileRuby(`^uses (java|gw)\.`),
		),
		rule.Or(
			rule.MatchingLanguages("Genie"),
			regex.MustCompileRuby(`^\[indent=[0-9]+\]`),
		),
	},
	".h": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Objective-C"),
			regex.MustCompileRuby(`^\s*(@(interface|class|protocol|property|end|synchronised|selector|implementation)\b|#import\s+.+\.h[">])`),
		),
		rule.Or(
			rule.MatchingLanguages("C++"),
			regex.MustCompileRuby(`^\s*#\s*include <(cstdint|string|vector|map|list|array|bitset|queue|stack|forward_list|unordered_map|unordered_set|(i|o|io)stream)>|^\s*template\s*<|^[ \t]*(try|constexpr)|^[ \t]*catch\s*\(|^[ \t]*(class|(using[ \t]+)?namespace)\s+\w+|^[ \t]*(private|public|protected):$|std::\w+`),
		),
		rule.Always(
			rule.MatchingLanguages("C"),
		),
	},
	".hh": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Hack"),
			regex.MustCompileRuby(`<\?hh`),
		),
	},
	".i": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Motorola 68K Assembly"),
			regex.MustCompileRuby(`(?im)\bmoveq(?:\.l)?\s+#(?:\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\s*d[0-7]\b|(?im)^\s*move(?:\.[bwl])?\s+(?:sr|usp),\s*[^\s]+|(?im)^\s*move\.[bwl]\s+.*\b[ad]\d|(?im)^\s*movem\.[bwl]\b|(?im)^\s*move[mp](?:\.[wl])?\b|(?im)^\s*btst\b|(?im)^\s*dbra\b`),
		),
		rule.Or(
			rule.MatchingLanguages("SWIG"),
			regex.MustCompileRuby(`^[ \t]*%[a-z_]+\b|^%[{}]$`),
		),
	},
	".ice": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("JSON"),
			regex.MustCompileRuby(`\A\s*[{\[]`),
		),
		rule.Always(
			rule.MatchingLanguages("Slice"),
		),
	},
	".inc": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Motorola 68K Assembly"),
			regex.MustCompileRuby(`(?im)\bmoveq(?:\.l)?\s+#(?:\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\s*d[0-7]\b|(?im)^\s*move(?:\.[bwl])?\s+(?:sr|usp),\s*[^\s]+|(?im)^\s*move\.[bwl]\s+.*\b[ad]\d|(?im)^\s*movem\.[bwl]\b|(?im)^\s*move[mp](?:\.[wl])?\b|(?im)^\s*btst\b|(?im)^\s*dbra\b`),
		),
		rule.Or(
			rule.MatchingLanguages("PHP"),
			regex.MustCompileRuby(`^<\?(?:php)?`),
		),
		rule.Or(
			rule.MatchingLanguages("SourcePawn"),
			regex.MustCompileRuby(`^public\s+(?:SharedPlugin(?:\s+|:)__pl_\w+\s*=(?:\s*{)?|(?:void\s+)?__pl_\w+_SetNTVOptional\(\)(?:\s*{)?)|^methodmap\s+\w+\s+<\s+\w+|^\s*MarkNativeAsOptional\s*\(`),
		),
		rule.Or(
			rule.MatchingLanguages("NASL"),
			regex.MustCompileRuby(`^\s*include\s*\(\s*(?:"|')[\\/\w\-\.:\s]+\.(?:nasl|inc)\s*(?:"|')\s*\)\s*;|^\s*(?:global|local)_var\s+(?:\w+(?:\s*=\s*[\w\-"']+)?\s*)(?:,\s*\w+(?:\s*=\s*[\w\-"']+)?\s*)*+\s*;|^\s*namespace\s+\w+\s*{|^\s*object\s+\w+\s*(?:extends\s+\w+(?:::\w+)?)?\s*{|^\s*(?:public\s+|private\s+|\s*)function\s+\w+\s*\([\w\s,]*\)\s*{`),
		),
		rule.Or(
			rule.MatchingLanguages("POV-Ray SDL"),
			regex.MustCompileRuby(`^\s*#(declare|local|macro|while)\s`),
		),
		rule.Or(
			rule.MatchingLanguages("Pascal"),
			regex.MustCompileRuby(`(?i:^\s*{\$(?:mode|ifdef|undef|define)[ ]+[a-z0-9_]+})|^\s*end[.;]\s*$`),
		),
	},
	".l": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Common Lisp"),
			regex.MustCompileRuby(`\(def(un|macro)\s`),
		),
		rule.Or(
			rule.MatchingLanguages("Lex"),
			regex.MustCompileRuby(`^(%[%{}]xs|<.*>)`),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.[A-Za-z]{2}(\s|$)`),
		),
		rule.Or(
			rule.MatchingLanguages("PicoLisp"),
			regex.MustCompileRuby(`^\((de|class|rel|code|data|must)\s`),
		),
	},
	".lisp": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Common Lisp"),
			regex.MustCompileRuby(`^\s*\((?i:defun|in-package|defpackage) `),
		),
		rule.Or(
			rule.MatchingLanguages("NewLisp"),
			regex.MustCompileRuby(`^\s*\(define `),
		),
	},
	".ls": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("LoomScript"),
			regex.MustCompileRuby(`^\s*package\s*[\w\.\/\*\s]*\s*{`),
		),
		rule.Always(
			rule.MatchingLanguages("LiveScript"),
		),
	},
	".lsp": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Common Lisp"),
			regex.MustCompileRuby(`^\s*\((?i:defun|in-package|defpackage) `),
		),
		rule.Or(
			rule.MatchingLanguages("NewLisp"),
			regex.MustCompileRuby(`^\s*\(define `),
		),
	},
	".m": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Objective-C"),
			regex.MustCompileRuby(`^\s*(@(interface|class|protocol|property|end|synchronised|selector|implementation)\b|#import\s+.+\.h[">])`),
		),
		rule.Or(
			rule.MatchingLanguages("Mercury"),
			regex.MustCompileRuby(`:- module`),
		),
		rule.Or(
			rule.MatchingLanguages("MUF"),
			regex.MustCompileRuby(`^: `),
		),
		rule.Or(
			rule.MatchingLanguages("M"),
			regex.MustCompileRuby(`^\s*;`),
		),
		rule.And(
			rule.MatchingLanguages("Mathematica"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`\(\*`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`\*\)$`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("MATLAB"),
			regex.MustCompileRuby(`^\s*%`),
		),
		rule.Or(
			rule.MatchingLanguages("Limbo"),
			regex.MustCompileRuby(`^\w+\s*:\s*module\s*{`),
		),
	},
	".m4": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("M4Sugar"),
			regex.MustCompileRuby(`AC_DEFUN|AC_PREREQ|AC_INIT|^_?m4_`),
		),
		rule.Always(
			rule.MatchingLanguages("M4"),
		),
	},
	".man": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".mask": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Unity3d Asset"),
			regex.MustCompileRuby(`tag:unity3d.com`),
		),
	},
	".md": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Markdown"),
			regex.MustCompileRuby(`(^[-A-Za-z0-9=#!\*\[|>])|<\/|\A\z`),
		),
		rule.Or(
			rule.MatchingLanguages("GCC Machine Description"),
			regex.MustCompileRuby(`^(;;|\(define_)`),
		),
		rule.Always(
			rule.MatchingLanguages("Markdown"),
		),
	},
	".mdoc": &Heuristics{
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dd +(?:[^"\s]+|"[^"]+")`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Dt +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*Sh +(?:[^"\s]|"[^"]+")`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Roff Manpage"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*TH +(?:[^"\s]+|"[^"]+") +"?(?:[1-9]|@[^\s@]+@)`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[.'][ \t]*SH +(?:[^"\s]+|"[^"\s]+)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("Roff"),
		),
	},
	".ml": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("OCaml"),
			regex.MustCompileRuby(`(^\s*module)|let rec |match\s+(\S+\s)+with`),
		),
		rule.Or(
			rule.MatchingLanguages("Standard ML"),
			regex.MustCompileRuby(`=> |case\s+(\S+\s)+of`),
		),
	},
	".mod": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("XML"),
			regex.MustCompileRuby(`<!ENTITY `),
		),
		rule.Or(
			rule.MatchingLanguages("Modula-2"),
			regex.MustCompileRuby(`^\s*(?i:MODULE|END) [\w\.]+;`),
		),
		rule.Always(
			rule.MatchingLanguages("Linux Kernel Module", "AMPL"),
		),
	},
	".ms": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^[.'][A-Za-z]{2}(\s|$)`),
		),
		rule.And(
			rule.MatchingLanguages("Unix Assembly"),
			rule.Not(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`/\*`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^\s*\.(?:include\s|globa?l\s|[A-Za-z][_A-Za-z0-9]*:)`),
			),
		),
		rule.Always(
			rule.MatchingLanguages("MAXScript"),
		),
	},
	".n": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^[.']`),
		),
		rule.Or(
			rule.MatchingLanguages("Nemerle"),
			regex.MustCompileRuby(`^(module|namespace|using)\s`),
		),
	},
	".ncl": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("XML"),
			regex.MustCompileRuby(`^\s*<\?xml\s+version`),
		),
		rule.Or(
			rule.MatchingLanguages("Gerber Image"),
			regex.MustCompileRuby(`^[DGMT][0-9]{2}\*\r?\n`),
		),
		rule.Or(
			rule.MatchingLanguages("Text"),
			regex.MustCompileRuby(`THE_TITLE`),
		),
	},
	".nl": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("NL"),
			regex.MustCompileRuby(`^(b|g)[0-9]+ `),
		),
		rule.Always(
			rule.MatchingLanguages("NewLisp"),
		),
	},
	".odin": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Object Data Instance Notation"),
			regex.MustCompileRuby(`(?:^|<)\s*[A-Za-z0-9_]+\s*=\s*<`),
		),
		rule.Or(
			rule.MatchingLanguages("Odin"),
			regex.MustCompileRuby(`package\s+\w+|\b(?:im|ex)port\s*"[\w:./]+"|\w+\s*::\s*(?:proc|struct)\s*\(|^\s*//\s`),
		),
	},
	".p": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Gnuplot"),
			regex.MustCompileRuby(`^s?plot\b|^set\s+(term|terminal|out|output|[xy]tics|[xy]label|[xy]range|style)\b`),
		),
		rule.Always(
			rule.MatchingLanguages("OpenEdge ABL"),
		),
	},
	".php": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Hack"),
			regex.MustCompileRuby(`<\?hh`),
		),
		rule.Or(
			rule.MatchingLanguages("PHP"),
			regex.MustCompileRuby(`<\?[^h]`),
		),
	},
	".pl": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Prolog"),
			regex.MustCompileRuby(`^[^#]*:-`),
		),
		rule.Or(
			rule.MatchingLanguages("Perl"),
			regex.MustCompileRuby(`\buse\s+(?:strict\b|v?5\.)`),
		),
		rule.Or(
			rule.MatchingLanguages("Raku"),
			regex.MustCompileRuby(`^\s*(?:use\s+v6\b|\bmodule\b|\b(?:my\s+)?class\b)`),
		),
	},
	".plist": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("XML Property List"),
			regex.MustCompileRuby(`<!DOCTYPE\s+plist`),
		),
		rule.Always(
			rule.MatchingLanguages("OpenStep Property List"),
		),
	},
	".pm": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Perl"),
			regex.MustCompileRuby(`\buse\s+(?:strict\b|v?5\.)`),
		),
		rule.Or(
			rule.MatchingLanguages("Raku"),
			regex.MustCompileRuby(`^\s*(?:use\s+v6\b|\bmodule\b|\b(?:my\s+)?class\b)`),
		),
		rule.Or(
			rule.MatchingLanguages("X PixMap"),
			regex.MustCompileRuby(`^\s*\/\* XPM \*\/`),
		),
	},
	".pod": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Pod 6"),
			regex.MustCompileRuby(`^[\s&&[^\n]]*=(comment|begin pod|begin para|item\d+)`),
		),
		rule.Always(
			rule.MatchingLanguages("Pod"),
		),
	},
	".pp": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Pascal"),
			regex.MustCompileRuby(`^\s*end[.;]`),
		),
		rule.Or(
			rule.MatchingLanguages("Puppet"),
			regex.MustCompileRuby(`^\s+\w+\s+=>\s`),
		),
	},
	".pro": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Proguard"),
			regex.MustCompileRuby(`^-(include\b.*\.pro$|keep\b|keepclassmembers\b|keepattributes\b)`),
		),
		rule.Or(
			rule.MatchingLanguages("Prolog"),
			regex.MustCompileRuby(`^[^\[#]+:-`),
		),
		rule.Or(
			rule.MatchingLanguages("INI"),
			regex.MustCompileRuby(`last_client=`),
		),
		rule.And(
			rule.MatchingLanguages("QMake"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`HEADERS`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`SOURCES`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("IDL"),
			regex.MustCompileRuby(`^\s*function[ \w,]+$`),
		),
	},
	".properties": &Heuristics{
		rule.And(
			rule.MatchingLanguages("INI"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[^#!;][^=]*=`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[;\[]`),
			),
		),
		rule.And(
			rule.MatchingLanguages("Java Properties"),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[^#!;][^=]*=`),
			),
			rule.Or(
				rule.MatchingLanguages(""),
				regex.MustCompileRuby(`^[#!]`),
			),
		),
		rule.Or(
			rule.MatchingLanguages("INI"),
			regex.MustCompileRuby(`^[^#!;][^=]*=`),
		),
		rule.Or(
			rule.MatchingLanguages("Java Properties"),
			regex.MustCompileRuby(`^[^#!][^:]*:`),
		),
	},
	".q": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("q"),
			regex.MustCompileRuby(`((?i:[A-Z.][\w.]*:{)|(^|\n)\\(cd?|d|l|p|ts?) )`),
		),
		rule.Or(
			rule.MatchingLanguages("HiveQL"),
			regex.MustCompileRuby(`(?i:SELECT\s+[\w*,]+\s+FROM|(CREATE|ALTER|DROP)\s(DATABASE|SCHEMA|TABLE))`),
		),
	},
	".qs": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Q#"),
			regex.MustCompileRuby(`^((\/{2,3})?\s*(namespace|operation)\b)`),
		),
		rule.Or(
			rule.MatchingLanguages("Qt Script"),
			regex.MustCompileRuby(`(\w+\.prototype\.\w+|===|\bvar\b)`),
		),
	},
	".r": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Rebol"),
			regex.MustCompileRuby(`(?i:\bRebol\b)`),
		),
		rule.Or(
			rule.MatchingLanguages("R"),
			regex.MustCompileRuby(`<-|^\s*#`),
		),
	},
	".re": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Reason"),
			regex.MustCompileRuby(`^\s*module\s+type\s|^\s*(?:include|open)\s+\w+\s*;\s*$|^\s*let\s+(?:module\s\w+\s*=\s*{|\w+:\s+.*=.*;\s*$)`),
		),
		rule.Or(
			rule.MatchingLanguages("C++"),
			regex.MustCompileRuby(`^\s*#(?:(?:if|ifdef|define|pragma)\s+\w|\s*include\s+<[^>]+>)|^\s*template\s*<`),
		),
	},
	".res": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("ReScript"),
			regex.MustCompileRuby(`^\s*(let|module|type)\s+\w*\s+=\s+|^\s*(?:include|open)\s+\w+\s*$`),
		),
	},
	".rno": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("RUNOFF"),
			regex.MustCompileRuby(`(?i:^\.!|^\f|\f$|^\.end lit(?:eral)?\b|^\.[a-zA-Z].*?;\.[a-zA-Z](?:[; \t])|\^\*[^\s*][^*]*\\\*(?=$|\s)|^\.c;[ \t]*\w+)`),
		),
		rule.Or(
			rule.MatchingLanguages("Roff"),
			regex.MustCompileRuby(`^\.\\" `),
		),
	},
	".rpy": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Python"),
			regex.MustCompileRuby(`(?m:^(import|from|class|def)\s)`),
		),
		rule.Always(
			rule.MatchingLanguages("Ren'Py"),
		),
	},
	".rs": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Rust"),
			regex.MustCompileRuby(`^(use |fn |mod |pub |macro_rules|impl|#!?\[)`),
		),
		rule.Or(
			rule.MatchingLanguages("RenderScript"),
			regex.MustCompileRuby(`#include|#pragma\s+(rs|version)|__attribute__`),
		),
		rule.Or(
			rule.MatchingLanguages("XML"),
			regex.MustCompileRuby(`^\s*<\?xml`),
		),
	},
	".s": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Motorola 68K Assembly"),
			regex.MustCompileRuby(`(?im)\bmoveq(?:\.l)?\s+#(?:\$-?[0-9a-f]{1,3}|%[0-1]{1,8}|-?[0-9]{1,3}),\s*d[0-7]\b|(?im)^\s*move(?:\.[bwl])?\s+(?:sr|usp),\s*[^\s]+|(?im)^\s*move\.[bwl]\s+.*\b[ad]\d|(?im)^\s*movem\.[bwl]\b|(?im)^\s*move[mp](?:\.[wl])?\b|(?im)^\s*btst\b|(?im)^\s*dbra\b`),
		),
	},
	".sc": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("SuperCollider"),
			regex.MustCompileRuby(`(?i:\^(this|super)\.|^\s*~\w+\s*=\.)`),
		),
		rule.Or(
			rule.MatchingLanguages("Scala"),
			regex.MustCompileRuby(`(^\s*import (scala|java)\.|^\s*class\b)`),
		),
	},
	".sol": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Solidity"),
			regex.MustCompileRuby(`\bpragma\s+solidity\b|\b(?:abstract\s+)?contract\s+(?!\d)[a-zA-Z0-9$_]+(?:\s+is\s+(?:[a-zA-Z0-9$_][^\{]*?)?)?\s*\{`),
		),
		rule.Or(
			rule.MatchingLanguages("Gerber Image"),
			regex.MustCompileRuby(`^[DGMT][0-9]{2}\*\r?\n`),
		),
	},
	".sql": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("PLpgSQL"),
			regex.MustCompileRuby(`(?i:^\\i\b|AS\s+\$\$|LANGUAGE\s+'?plpgsql'?|BEGIN(\s+WORK)?\s*;)`),
		),
		rule.Or(
			rule.MatchingLanguages("SQLPL"),
			regex.MustCompileRuby(`(?i:ALTER\s+MODULE|MODE\s+DB2SQL|\bSYS(CAT|PROC)\.|ASSOCIATE\s+RESULT\s+SET|\bEND!\s*$)`),
		),
		rule.Or(
			rule.MatchingLanguages("PLSQL"),
			regex.MustCompileRuby(`(?i:\$\$PLSQL_|XMLTYPE|systimestamp|\.nextval|CONNECT\s+BY|AUTHID\s+(DEFINER|CURRENT_USER)|constructor\W+function)`),
		),
		rule.Or(
			rule.MatchingLanguages("TSQL"),
			regex.MustCompileRuby(`(?i:^\s*GO\b|BEGIN(\s+TRY|\s+CATCH)|OUTPUT\s+INSERTED|DECLARE\s+@|\[dbo\])`),
		),
		rule.Always(
			rule.MatchingLanguages("SQL"),
		),
	},
	".srt": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("SubRip Text"),
			regex.MustCompileRuby(`^(\d{2}:\d{2}:\d{2},\d{3})\s*(-->)\s*(\d{2}:\d{2}:\d{2},\d{3})$`),
		),
	},
	".st": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("StringTemplate"),
			regex.MustCompileRuby(`\$\w+[($]|(.)!\s*.+?\s*!\1|<!\s*.+?\s*!>|\[!\s*.+?\s*!\]|\{!\s*.+?\s*!\}`),
		),
		rule.Or(
			rule.MatchingLanguages("Smalltalk"),
			regex.MustCompileRuby(`\A\s*[\[{(^"'\w#]|[a-zA-Z_]\w*\s*:=\s*[a-zA-Z_]\w*|class\s*>>\s*[a-zA-Z_]\w*|^[a-zA-Z_]\w*\s+[a-zA-Z_]\w*:|^Class\s*{|if(?:True|False):\s*\[`),
		),
	},
	".t": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Perl"),
			regex.MustCompileRuby(`\buse\s+(?:strict\b|v?5\.)`),
		),
		rule.Or(
			rule.MatchingLanguages("Raku"),
			regex.MustCompileRuby(`^\s*(?:use\s+v6\b|\bmodule\b|\bmy\s+class\b)`),
		),
		rule.Or(
			rule.MatchingLanguages("Turing"),
			regex.MustCompileRuby(`^\s*%[ \t]+|^\s*var\s+\w+(\s*:\s*\w+)?\s*:=\s*\w+`),
		),
	},
	".toc": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("World of Warcraft Addon Data"),
			regex.MustCompileRuby(`^## |@no-lib-strip@`),
		),
		rule.Or(
			rule.MatchingLanguages("TeX"),
			regex.MustCompileRuby(`^\\(contentsline|defcounter|beamer|boolfalse)`),
		),
	},
	".ts": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("XML"),
			regex.MustCompileRuby(`<TS\b`),
		),
		rule.Always(
			rule.MatchingLanguages("TypeScript"),
		),
	},
	".tst": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("GAP"),
			regex.MustCompileRuby(`gap> `),
		),
		rule.Always(
			rule.MatchingLanguages("Scilab"),
		),
	},
	".tsx": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("TSX"),
			regex.MustCompileRuby(`^\s*(import.+(from\s+|require\()['"]react|\/\/\/\s*<reference\s)`),
		),
		rule.Or(
			rule.MatchingLanguages("XML"),
			regex.MustCompileRuby(`(?i:^\s*<\?xml\s+version)`),
		),
	},
	".txt": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Vim Help File"),
			regex.MustCompileRuby(`(?:(?:^|[ \t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \t]ex)(?=:(?=[ \t]*set?[ \t][^\r\n:]+:)|:(?![ \t]*set?[ \t]))(?:(?:[ \t]*:[ \t]*|[ \t])\w*(?:[ \t]*=(?:[^\\\s]|\\.)*)?)*[ \t:](?:filetype|ft|syntax)[ \t]*=(help)(?=$|\s|:)`),
		),
		rule.Always(
			rule.MatchingLanguages("Text"),
		),
	},
	".v": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Coq"),
			regex.MustCompileRuby(`(?:^|\s)(?:Proof|Qed)\.(?:$|\s)|(?:^|\s)Require[ \t]+(Import|Export)\s`),
		),
		rule.Or(
			rule.MatchingLanguages("Verilog"),
			regex.MustCompileRuby(`^[ \t]*module\s+[^\s()]+\s+\#?\(|^[ \t]*`+"`"+`(?:define|ifdef|ifndef|include|timescale)|^[ \t]*always[ \t]+@|^[ \t]*initial[ \t]+(begin|@)`),
		),
		rule.Or(
			rule.MatchingLanguages("V"),
			regex.MustCompileRuby(`\$(?:if|else)[ \t]|^[ \t]*fn\s+[^\s()]+\(.*?\).*?\{|^[ \t]*for\s*\{`),
		),
	},
	".vba": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("Vim script"),
			regex.MustCompileRuby(`^UseVimball`),
		),
		rule.Always(
			rule.MatchingLanguages("VBA"),
		),
	},
	".w": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("OpenEdge ABL"),
			regex.MustCompileRuby(`&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS`),
		),
		rule.Or(
			rule.MatchingLanguages("CWeb"),
			regex.MustCompileRuby(`^@(<|\w+\.)`),
		),
	},
	".x": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("DirectX 3D File"),
			regex.MustCompileRuby(`^xof 030(2|3)(?:txt|bin|tzip|bzip)\b`),
		),
		rule.Or(
			rule.MatchingLanguages("RPC"),
			regex.MustCompileRuby(`\b(program|version)\s+\w+\s*{|\bunion\s+\w+\s+switch\s*\(`),
		),
		rule.Or(
			rule.MatchingLanguages("Logos"),
			regex.MustCompileRuby(`^%(end|ctor|hook|group)\b`),
		),
		rule.Or(
			rule.MatchingLanguages("Linker Script"),
			regex.MustCompileRuby(`OUTPUT_ARCH\(|OUTPUT_FORMAT\(|SECTIONS`),
		),
	},
	".yy": &Heuristics{
		rule.Or(
			rule.MatchingLanguages("JSON"),
			regex.MustCompileRuby(`\"modelName\"\:\s*\"GM`),
		),
		rule.Always(
			rule.MatchingLanguages("Yacc"),
		),
	},
}
